<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
    <meta http-equiv="x-ua-compatible" content="IE=Edge">
    <script type="text/javascript">
//storage frame simply stored whatever data is given to it as localStorage[name] = value
// pairs or returns the data again as event.data.name, event.data.value pairs
(function() {
    // gzip flag
    var isGzip = true;
    // helper function
    var getParamValue = function(paramName) {
        var url = location.href;
        var paramValue = '';
        var regex = new RegExp("[\\?&]" + paramName + "=([^&#]*)");
        var qs = regex.exec(url);
        if (qs !== null) {
            paramValue = qs[1];
        }
        return paramValue;
    };
    var escapeForRegExp = function(text) {
        return (text + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    };
    var stringify = function(obj) {
        if (typeof JSON !== 'undefined' && typeof JSON.stringify === 'function') {
            return JSON.stringify(obj);
        } else {
            var type = typeof(obj);
            if (type !== 'undefined') {
                if (type != "object" || obj === null) {
                    // simple data type
                    if (type == "string") obj = '"' + this.escapeNewLine(obj) + '"';
                    return String(obj);
                } else {
                    // recurse array or object
                    var json = [],
                        arr = (obj && obj.constructor == Array),
                        dt = (obj && obj instanceof Date);
                    if (arr) {
                        for (var i = 0; i < obj.length; i++) {
                            var val = this.stringify(obj[i]);
                            if (typeof val !== 'undefined') json.push(val);
                        }
                    } else if (dt) {
                        return dt.toString();
                    } else {
                        for (var n in obj) {
                            var val = this.stringify(obj[n]);
                            if (typeof val !== 'undefined') json.push('"' + n + '":' + val);
                        }
                    }
                    return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
                }
            }
        }
    };

    // TODO - read framName at the init from the url parameter may be
    var frameName = getParamValue("cbf") || 'wkCBStorageFrame';
    // TODO - send data to right domains from here
    var sendData = function(msg, name, value) {
        if (window.parent.window.frames[frameName]) {
            window.parent.window.frames[frameName].postMessage(stringify({
                'name': name,
                'msg': msg,
                'value': value
            }), '*');
        }
    };

    // frame initialisation after v3 is loaded
    var frameInit = function(v3data) {
        // Checking the domain validity ---
        var isValidOrigin = function(origin) {
            origin = origin.replace(/https?:\/\//, ''); // getting rid off the scheme from the event.orign
            var flag = false;
            var originHost = origin.split(":")[0];
            var originPort = origin.split(":")[1];
            var domains = [];
            var regexps = [];
            if (v3data.sites === undefined || !v3data.sites) {
                v3data.sites = {};
                v3data.sites[v3data.domain] = 'DOMAIN';
            }
            for (var key in v3data.sites) {
                var _publisherDomain = key,
                    _publisherDomainPort;
                if (v3data.sites[key] == 'DOMAIN') {
                    domains[domains.length] = _publisherDomain;
                    if (_publisherDomain.match(/^www\./i)) {
                        _publisherDomain = _publisherDomain.substring(4, _publisherDomain.length);
                    }
                    if (_publisherDomain.match(/\:[\d]*$/)) {
                        _publisherDomainPort = _publisherDomain.substring(_publisherDomain.indexOf(':') + 1, _publisherDomain.length);
                        _publisherDomain = _publisherDomain.substring(0, _publisherDomain.indexOf(':'));
                    }
                    if ((originHost.match(new RegExp(escapeForRegExp(_publisherDomain) + "$", 'gi')) && (!_publisherDomainPort || _publisherDomainPort == originPort))) {
                        flag = true;
                        break;
                    }
                } else if (v3data.sites[key] == 'REGEXP') {
                    var matcherExp = _publisherDomain;
                    regexps[regexps.length] = _publisherDomain;
                    if ((origin.match(matcherExp))) {
                        flag = true;
                        break;
                    }
                }
            }
            return flag;
        };

        var messageReceiver = function(event) {
            if (isValidOrigin(event.origin)) {
                var name = event.data.name;
                var value = event.data.value;
                var action = event.data.action;
                switch (action) {
                    case 'store':
                        localStorage.setItem(name, value);
                        //sendData('update', name, localStorage[name]);
                        break;
                    case 'read':
                        sendData('new-data', name, localStorage[name]);
                        break;
                }
            } else {
                // TODO - send invalid request
            }
        };

        // setting onMessageRecieve
        window.onmessage = messageReceiver;
        var storeChangeListener = function(event) {
            var validKeys = ["_wk_we_ss_", "_wk_we_ls_"];
            if (validKeys.indexOf(event.key) > -1) {
                sendData('update', event.key, event.newValue);
            }
        };
        // localStorage Listener
        if(window.addEventListener) {
            window.addEventListener("storage", storeChangeListener, false);
        }
        else if(window.attachEvent) {
            window.attachEvent("onstorage", storeChangeListener, false);
        }

        // checking for localStorage support
        var localStorageSupport = (function() {
            try {
                var _localStorageFlag = (typeof(Storage) !== "undefined" && 'localStorage' in window && window['localStorage'] !== null);
                if (_localStorageFlag) { // For IOS tablet. Though it supports localStorage it throughs QuotaExceedError.
                    window['localStorage']['_we_dm_ios_sup_f_'] = 'true';
                    window['localStorage'].removeItem('_we_dm_ios_sup_f_');
                }
                return _localStorageFlag;
            } catch (e) {
                return false;
            }
        }());
        if (localStorageSupport) {
            sendData('init', 'init', {
                'status': 'success',
                'webengage_fs_configurationMap': webengage_fs_configurationMap,
                'isGzip': isGzip
            });
        } else {
            sendData('init', 'init', {
                'status': 'failed'
            });
        }
    };
    window.onload = function() {
        // loading v3 and calling frameInit with fs_configuration_map
        var v3 = document.createElement('script');
        v3.type = "text/javascript";
        var parentFolder = (isGzip ? 'webengage-zfiles' : 'webengage-files');
        var lc = getParamValue("lc"),
            r = Math.floor((new Date()).getTime() / 60000);
        v3.src = '//s3.amazonaws.com/' + parentFolder + '/webengage/' + lc + '/v3.js?r=' + r;
        v3.onload = function(event) {
            frameInit(webengage_fs_configurationMap);
        };
        v3.onreadystatechange = function() {
            if(!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') {
                v3.onload();
            }
        };

        document.body.appendChild(v3);
    };
}());
    </script>
  </head>
  <body>
    This is the storage Frame
  

<script src="storage-frame_data/v3.js" type="text/javascript"></script></body></html>